Create database lab7;
use lab7;
create Table EMP
(EMPNO NUMERIC (4) NOT NULL,
 ENAME VARCHAR(10),
 JOB VARCHAR(9),
 MGR NUMERIC(4),
 HIREDATE DATE,
 SAL NUMERIC(7, 2),
 COMM NUMERIC(7,2),
 DEPTNO NUMERIC(2)
);

SELECT* FROM EMP   -- ASTERISK MEANS WHOLE TABLE OF EMPLOYEE WILL BE SELECTED
SELECT ENAME, EMPNO FROM EMP;

INSERT INTO EMP VALUES
  (7369, 'SMITH', 'CLERK', 7902, CONVERT(DATE, '17-DEC-1980'), 800, NULL, 20);
INSERT INTO EMP VALUES
  (7499, 'ALLEN', 'SALESMAN', 7698, CONVERT(DATE, '20-FEB-1981'), 1600, 300, 30);
INSERT INTO EMP VALUES
  (7521, 'WARD', 'SALESMAN', 7698, CONVERT(DATE, '22-FEB-1981'), 1250, 500, 30);
INSERT INTO EMP VALUES
  (7566, 'JONES', 'MANAGER', 7839, CONVERT(DATE, '2-APR-1981'), 2975, NULL, 20);
INSERT INTO EMP VALUES
  (7654, 'MARTIN', 'SALESMAN', 7698, CONVERT(DATE, '28-SEP-1981'), 1250, 1400, 30);
INSERT INTO EMP VALUES
  (7698, 'BLAKE', 'MANAGER', 7839, CONVERT(DATE, '1-MAY-1981'), 2850, NULL, 30);
INSERT INTO EMP VALUES
  (7782, 'CLARK', 'MANAGER', 7839, CONVERT(DATE, '9-JUN-1981'), 2450, NULL, 10);
INSERT INTO EMP VALUES
  (7788, 'SCOTT', 'ANALYST', 7566, CONVERT(DATE, '09-DEC-1982'), 3000, NULL, 20);
INSERT INTO EMP VALUES
  (7839, 'KING', 'PRESIDENT', NULL, CONVERT(DATE, '17-NOV-1981'), 5000, NULL, 10);
INSERT INTO EMP VALUES
  (7844, 'TURNER', 'SALESMAN', 7698, CONVERT(DATE, '8-SEP-1981'), 1500, 0, 30);
INSERT INTO EMP VALUES
  (7876, 'ADAMS', 'CLERK', 7788, CONVERT(DATE, '12-JAN-1983'), 1100, NULL, 20);
  INSERT INTO EMP VALUES
  (7900, 'JAMES', 'CLERK', 7698, CONVERT(DATE, '3-DEC-1981'), 950, NULL, 30);
INSERT INTO EMP VALUES
  (7902, 'FORD', 'ANALYST', 7566, CONVERT(DATE, '3-DEC-1981'), 3000, NULL, 20);
INSERT INTO EMP VALUES
  (7934, 'MILLER', 'CLERK', 7782, CONVERT(DATE, '23-JAN-1982'), 1300, NULL, 10);

CREATE TABLE DEPT
(DEPTNO NUMERIC(2),
DNAME VARCHAR(14),
LOC VARCHAR(13)
);

INSERT INTO DEPT VALUES (10, 'ACCOUNTING', 'NEW YORK');
INSERT INTO DEPT VALUES (20, 'RESEARCH', 'DALLAS');
INSERT INTO DEPT VALUES (30, 'SALES', 'CHICAGO');
INSERT INTO DEPT VALUES (40, 'OPERATIONS', 'BOSTON');

CREATE TABLE BONUS
(ENAME VARCHAR(10),
JOB VARCHAR(9),
SAL NUMERIC,
COMM NUMERIC
);

CREATE TABLE SALGRADE
(GRADE NUMERIC,
LOSAL NUMERIC,
HISAL NUMERIC
);

INSERT INTO SALGRADE VALUES (1, 700, 1200);
INSERT INTO SALGRADE VALUES (2, 1201, 1400);
INSERT INTO SALGRADE VALUES (3, 1401, 2000);
INSERT INTO SALGRADE VALUES (4, 2001, 3000);
INSERT INTO SALGRADE VALUES (5, 3001, 9999);

CREATE TABLE DUMMY
(DUMMY NUMERIC);

INSERT INTO DUMMY VALUES (0);

SELECT COUNT(*) --ASTERISK IS COUNT OF ALL TABLES  3RD EXEC
FROM INFORMATION_SCHEMA.TABLES   --1ST EXEC
WHERE TABLE_TYPE = 'BASE TABLE';  --2ND EXEC

EXEC sp_help 'DEPT';
EXEC sp_columns SALGRADE;
SELECT* FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME='EMP';

SELECT EMPNO, ENAME, SAL
FROM EMP;

SELECT JOB
FROM EMP

SELECT DISTINCT JOB
FROM EMP

SELECT DISTINCT JOB AS 'AVAILABLE JOBS' FROM EMP --ASSIGN ALIAS AT RUNTIME BUT DOESNT CHANGE TABLE AT BACKEND

SELECT*
FROM EMP

SELECT * FROM INFORMATION_SCHEMA.TABLES  --GIVES ALL TABLES OF DATABASE

-----QUESTION---
--SELECT ENAME, HIREDATE, JOB, COMM, SAL
--FROM EMP
--WHERE JOB = 'CLERK' OR SAL>1000
--ORDER BY ENAME DESC  --FOR DESCENDING AND ASC FOR ASCENDING

--SELECT ENAME, HIREDATE, JOB, COMM, SAL
--FROM EMP
--WHERE NOT JOB= 'CLERK' AND SAL>1000
--ORDER BY ENAME DESC 

----ONLY COMPARE SALARY OF ANALYST (FOR CORRECT RESULT PUT PARENTHESIS) 
--SELECT*
--FROM EMP
--WHERE JOB ='CLERK' OR
--JOB ='MANAGER' OR
--JOB = 'ANALYST'AND
--SAL<1200;

----CORRECT VERSION
--SELECT*
--FROM EMP
--WHERE (JOB ='CLERK'AND
--SAL<1200) OR
--(JOB ='MANAGER' AND
--SAL<1200) OR
--(JOB = 'ANALYST' AND
--SAL<1200);


----WILL COMPARE SLARIES OF ALL THREE
--SELECT* 
--FROM EMP
--WHERE JOB IN ('CLERK', 'MANAGER', 'ANALYST')
--AND
--SAL<1200;

--SELECT* 
--FROM EMP
--WHERE SAL BETWEEN 1000 AND 3000

--SELECT*
--FROM EMP
--WHERE SAL>=1000 AND SAL<=3000

--SELECT*
--FROM EMP
--WHERE ENAME LIKE 'MAR%';

--SELECT*
--FROM EMP
--WHERE ENAME LIKE 'A%';

----LAB TASK 

--SELECT ENAME, SAL+300
--FROM EMP

--SELECT ENAME, JOB, SAL
--FROM EMP
--WHERE COMM IS NULL;

--SELECT JOB
--FROM EMP

--SELECT EMPNO, ENAME, JOB, SAL
--FROM EMP
--WHERE SAL>1500 AND
--JOB LIKE '%MAN%';  --wild card search


--SELECT ENAME, JOB
--FROM EMP
--WHERE NOT JOB IN ('CLERK', 'ANALYST', 'SALESMAN'); 

--SELECT*
--FROM EMP
--WHERE ename LIKE '_O%'
--ORDER BY HIREDATE

--SELECT*
--FROM EMP
--WHERE SAL LIKE '_6__.00'  --PUT .00 WITH FLOAT AND 4 DASHES BCZ 4 DIGITS 
--ORDER BY HIREDATE

--SELECT CONCAT(ENAME, ' is ', JOB) from EMP;
--SELECT ENAME + ' IS ' +JOB FROM EMP; 
--SELECT CONCAT(ENAME, ' is ', JOB) AS INTRO from EMP; --USE ALIAS SO THAT COLUMN GETS A NAME WHEN WE USE JOINS
--SELECT SUBSTRING(ENAME, 1, 3) from EMP;

----TO USE CONCAT I.E STRING FUNCTION WITH A FLOAT, CONVERT THAT FLOAT EG. SAL TO STRING
--SELECT LEN(ENAME) from EMP;
--SELECT ENAME, LEN(ENAME) as 'length' from EMP;
--SELECT ename, CHARINDEX('S', ENAME) from EMP --WHERE EMPNO = 1234;
--SELECT REPLACE(ENAME, 'S', '*') as 'replace' from EMP;  --here replace is alias

----SELeCT WILL ONLY DO STUFF ON RUN TIME, so we can give aliases on

--SELECT GETDATE(); --GETS DATE FROM SYSTEM
-- SELECT DATENAME(YEAR, GETDATE()) AS 'Year';
-- SELECT DATENAME(QUARTER, GETDATE()) AS 'Quarter';
-- SELECT DATENAME(MONTH, GETDATE()) AS 'Month Name';
-- SELECT DATENAME(DAYOFYEAR, GETDATE()) AS 'DayOfYear';
-- SELECT DATENAME(DAY, GETDATE()) AS 'Day';
-- SELECT DATENAME(WEEK, GETDATE()) AS 'Week';
-- SELECT DATENAME(WEEKDAY, GETDATE()) AS 'Day of the Week';
-- SELECT DATENAME(HOUR, GETDATE()) AS 'Hour';
-- SELECT DATENAME(MINUTE, GETDATE()) AS 'Minute';
-- SELECT DATENAME(SECOND, GETDATE()) AS 'Second';
-- SELECT DATEPART(YYYY, GETDATE());
-- SELECT DATEPART(mm, GETDATE());
-- SELECT DATEPART(dd, GETDATE());

-- SELECT COMM, ISNULL(COMM, 5000) from EMP; --CHECKS IF COMMISSION IS NULL AND THEN REPLACES NULL BY 5000
-- --CANNOT DO SELECT COMM, WHERE COMM IS NULL+5000 (ADDING ANYTHING TO NULL WILL GIVE NULL)
-- --CANNOT PERFORM ANY ARITHMETIC OPERATION WITH NULL

-- --VIEWS : CREATES A CONTAINER FOR QUERY SO THAT WE DONT HAVE TO WRITE THE QUERY AGAIN , JUST CALL THAT NAME
-- --VIEW IS A VIRTUAL TABLE

-- GO
-- CREATE VIEW EMPLOYEE AS
-- SELECT ENAME, JOB, HIREDATE
-- FROM EMP
-- GO

-- SELECT* FROM EMPLOYEE  --CALLING VIEW

-- --TOP N ANALYSIS : GETS THE TOP3 IF N=3

-- SELECT TOP(3)* FROM EMP
-- ORDER BY SAL DESC  --FOR DESCENDING

-- --SELECT ALWAYS EXECUTES AT END...ORDER IS FROM=1, ORDER BY =2, SELECT=3

-- --SELECT* FROM EMP, DEPT  --WILL DO PRODUCT
-- --SELECT* FROM DEPT
-- --SELECT* FROM EMP

-- --CAN DO JOIN ON COLUMN WHICH IS COMMON IN BOTH TABLES

-- SELECT * FROM EMP, DEPT
-- WHERE EMP.DEPTNO=DEPT.DEPTNO  --THIS IS JOIN CROSS PRODUCT + SOME CONDITION
----ORDER OF EXECUTION IS 1=FROM , 2=WHERE, 3=SELECT 

--SELECT * FROM EMP INNER JOIN DEPT ON 
-- EMP.DEPTNO= DEPT.DEPTNO

-- --LEFT OUTER JOIN WILL GIVE THE COMMON OF BOTH TABLES + OTHER THAN THAT IN LEFT WHERE LEFT TABLE HAS A MISSING VALUE WHERE RIGHT TABLE'S VALUE SHOULD HAVE BEEN
-- --EG EMPLOYEE WORKING BUT NO DEPARTMENT ASSIGNED YET
-- --RIGHT : COMBINE OF BOTH + EXCESSIVE DATA OF RIGHT (ALL OF DATA OF RIGHT)
-- --FULL OUTER JOIN : CONCAT BOTH TABLES, I.E. RIGHT, LEFT TABLE COMMON AND EXTRAS IN LEFT RIGHT

-- --JOIN FORMULA: DO N-1 JOINS WHERE N = NUMBER OF TABLES

-- --GROUP WILL DO SEARCH/QUERY GROUP WISE

-- SELECT MIN(SAL) FROM EMP GROUP BY DEPTNO 

 -------------------LAB 7 TASKS-------------------

 --TASK1

 GO
 CREATE VIEW TASK01 AS
 SELECT EMP.EMPNO, LOWER(EMP.ENAME) AS 'NAME', DEPT.DNAME, DEPT.DEPTNO FROM EMP INNER JOIN DEPT ON 
 EMP.DEPTNO = DEPT.DEPTNO
 WHERE SAL>2000 AND DNAME='RESEARCH'
 GO

 SELECT* FROM TASK01

 --TASK2

 SELECT* FROM EMP WHERE SAL IN (SELECT  MIN(SAL) AS 'MIN SAL' FROM EMP GROUP BY DEPTNO) 
  SELECT* FROM EMP WHERE SAL IN (SELECT  MAX(SAL) AS 'MAX SAL' FROM EMP GROUP BY DEPTNO) 
 
 --TASK3
 SELECT EMP.EMPNO, EMP.ENAME, DEPT.DEPTNO, DEPT.DNAME FROM EMP INNER JOIN DEPT ON 
 EMP.DEPTNO = DEPT.DEPTNO
 WHERE DEPT.DEPTNO > 10 AND EMP.ENAME LIKE '%S%'; 

 --TASK4
 SELECT* FROM EMP 
 WHERE SAL > (SELECT SAL FROM EMP WHERE ENAME='JONES')

 --TASK5
 SELECT* FROM EMP
 WHERE JOB !='MANAGER' OR MGR = NULL

 --TASK6
 SELECT CONCAT(ENAME, ' is ', JOB) AS INTRO from EMP;